version: '3.6'
services:
  reverse-proxy:
    image: traefik # The official Traefik docker image
    restart: always
    container_name: crud-traefik
    command:
      #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      # - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=web # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      # - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      # ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      # - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      # - --certificatesresolvers.mytlschallenge.acme.email=areski@gmail.com # <== Setting email for certs
      # - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    ports:
      - "80:80"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
      # - ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
    networks:
      - web # <== Placing traefik on the network named web, to access containers on this network
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
        - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
        - "traefik.http.routers.api.rule=Host(`monitor.${DOMAIN}`)" # <== Setting the domain for the dashboard
        - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access
        # - "traefik.http.routers.api.middlewares=test-auth@file" # <== This is a middleware to redirect to https
        # - "traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0"
        # test/test - test2/test2
  postgres:
    container_name: crud-db
    image: postgres:12
    ports:
      - "5444:5432"
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespassword
      POSTGRES_DB: postgres
      # psql postgres://postgres:postgrespassword@localhost:5432/postgres
    networks:
      - backend
  graphql-engine:
    container_name: crud-graphql-engine
    image: hasura/graphql-engine:v1.2.0-beta.5
    ports:
      - "9080:8080"
    depends_on:
      - "postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      # HASURA_GRAPHQL_JWT_SECRET: '{"type":"RS256", "key":"${PUBLIC_KEY}"}'
      # HASURA_GRAPHQL_ACCESS_KEY: "${HASURA_ACCESS_KEY}"
    labels:
      - "traefik.frontend.rule=Host:graphql.${DOMAIN}"
      - "traefik.port=9080"
    networks:
      - web
      - backend
  web-app:
    container_name: crud-web-app
    build: .
    restart: always
    ports:
      - "8000:80"
    depends_on:
      - "graphql-engine"
    networks:
      - web
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.nginx-web.rule=Host(`${DOMAIN}`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.nginx-web.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      # - "traefik.http.routers.nginx-web.middlewares=redirect@file" # <== This is a middleware to redirect to https
      # - "traefik.http.routers.nginx-secured.rule=Host(`${DOMAIN}`)" # <== Your Domain Name for the https rule
      # - "traefik.http.routers.nginx-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      # - "traefik.http.routers.nginx-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https
      - "traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$AnC9n6DU$$b/QeAYmhp8lhFCwvjgiGR."

volumes:
  db_data:

networks:
  web:
    external: false
  backend:
    external: false
